useUnicode=true&characterEncoding=utf-8

# mybatis配置：mapper文件的为止和bean的为止
mybatis.mapper-locations= classpath:mapper/*Mapper.xml  
mybatis.type-aliases-package= com.sbm.demo.bean

#项目访问的端口
server.port= 8888

# 使用druid连接池
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 数据库的URL、帐号、密码、驱动，dbname是自己数据库中表空间的对应的名字，请修改为自己本地一致的
spring.datasource.url = jdbc:mysql://192.168.137.1:3306/nbk?autoReconnect=true&useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false
spring.datasource.username = root
spring.datasource.password = 123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#设定了连接数据库的数据池
#连接池的配置信息
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
spring.datasource.maxWait=60000
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.filters=stat,wall
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


# JavaMailSender 邮件发送的配置（使用163邮箱）
#javaMail配置（下面的 spring.mail.host 为发送邮箱的邮箱服务器,使用465端口并加密发送才行）
spring.mail.host=smtp.163.com
spring.mail.port=465
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
spring.mail.properties.mail.smtp.socketFactory.fallback = false

spring.mail.username=15622272351@163.com
spring.mail.password=science0126
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
#上面提到的spring.mail.host为发送邮箱的邮箱服务器
# 超时时间（可选）
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

#关于使用AOP进行日志信息的添加
logging.config= classpath:log4j.properties
#logging.logback.level= info #info ,debug
#logging.logback.path= /home/app/data/applogs/weblog
#logging.logback.appname= web

#使用nacos对SpringBoot项目进行管理部署
#server.servlet.context-path=/user  //访问url前面加的前缀
#spring.application.name=springboot2-nacos-yungfund-config
#nacos.config.server-addr=127.0.0.1:8848
#nacos.discovery.server-addr=127.0.0.1:8848




#SpringBoot+RocketMQ实现消息的推送
#RocketMQ应用的名称
spring.application.name=springboot-rocketmq
###producer#####
#该应用是否启用生产者
rocketmq.producer.isOnOff=on

#发送同一类消息的设置为同一个group，保证唯一,默认不需要设置，rocketmq会使用ip@pid(pid代表jvm名字)作为唯一标示
rocketmq.producer.groupName=${spring.application.name}

#mq的nameserver地址 --》也就是生产者生产消息使用的端口
rocketmq.producer.namesrvAddr=127.0.0.1:9876

#生产者生产消息的主题
rocketmq.producer.topic=DemoTopic

#消息最大长度 默认1024*4(4M)
rocketmq.producer.maxMessageSize=4096
#发送消息超时时间,默认3000
rocketmq.producer.sendMsgTimeout=3000
#发送消息失败重试次数，默认2
rocketmq.producer.retryTimesWhenSendFailed=2


###consumer#####
##该应用是否启用消费者
rocketmq.consumer.isOnOff=on
rocketmq.consumer.groupName=${spring.application.name}

#mq的nameserver地址，消费者监听的端口
rocketmq.consumer.namesrvAddr=127.0.0.1:9876

#该消费者订阅的主题和tags("*"号表示订阅该主题下所有的tags),格式：topic~tag1||tag2||tag3;topic2~*;
#rocketmq.consumer.topics=DemoTopic~tag1;
rocketmq.consumer.topics=DemoTopic~tag1;
rocketmq.consumer.consumeThreadMin=20
rocketmq.consumer.consumeThreadMax=64

#设置一次消费消息的条数，默认为1条
rocketmq.consumer.consumeMessageBatchMaxSize=1

